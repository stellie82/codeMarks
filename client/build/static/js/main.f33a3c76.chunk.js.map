{"version":3,"sources":["components/Header/index.js","components/Hero/index.js","components/PostDetail/index.js","components/PostComposer/index.js","components/UserProfile/index.js","components/PreviewCard/index.js","components/TagManager/index.js","App.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","Link","to","onClick","handleViewPopularPosts","handleViewRecentPosts","authenticated","handleViewMyPosts","user","social","github","username","href","Component","Hero","Prism","highlightAll","PostDetail","postKey","match","params","postDetails","postComments","postHasLoaded","commentsAreRealtime","userHighlightStart","userHighlightEnd","socket","loadPost","_this2","Promise","resolve","reject","queryString","fetch","method","credentials","headers","Accept","Content-Type","Access-Control-Allow-Credentials","then","response","json","data","content","highlight","atob","languages","javascript","setState","_this3","io","connect","query","on","comments","handleInboundNewComment","commentData","length","existingState","concat","toConsumableArray","commentText","author","authUser","id","text","highlightStart","highlightEnd","emit","title","description","dangerouslySetInnerHTML","__html","PostComposer","handleTitleChange","event","target","value","handleDescriptionChange","handleContentChange","postTitleInput","React","createRef","current","focus","postData","_id","btoa","console","clear","log","queryOptions","Access-Control-Allow-Origin","body","JSON","stringify","type","name","ref","onChange","e","tryPublishPost","UserProfile","provider","Greeting","PreviewCard","highlightedCode","previewData","TagManager","tagData","loadTags","map","tag","renderTagList","App","postPreviewData","_handleLogoutClick","window","open","_handleSignInClick","status","Error","responseJson","catch","error","finally","userInfo","postPreview","components_PreviewCard","_this4","BrowserRouter","Switch","Route","exact","path","render","components_Header","components_TagManager","components_Hero","renderPreviewCards","components_PostDetail","components_PostComposer","components_UserProfile","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f33a3c76.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\"\n\nclass Header extends Component {\n\n  state = {};\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n      <div className=\"header\">\n        <Link to=\"/\" className=\"title\">codemarks</Link>\n        <div className=\"btn-row markOptions\">\n          <span className=\"rounded-btn icon-btn-before popularMarks\" onClick={this.props.handleViewPopularPosts}>Popular marks</span>\n          <span className=\"rounded-btn icon-btn-before recentMarks\" onClick={this.handleViewRecentPosts}>Recent marks</span>\n          { this.props.authenticated ? <span to=\"/mine\" className=\"skyblue rounded-btn icon-btn-before myMarks\" onClick={this.handleViewMyPosts}>My marks</span> : '' }\n          { this.props.authenticated ? <Link to=\"/newpost\" className=\"lime rounded-btn icon-btn-before newMark\">New mark</Link> : '' }\n        </div>\n        {this.props.authenticated ?\n          (<span className=\"authStatus\">Welcome back, {this.props.user.social.github.username}.\n              <a className=\"red rounded-btn icon-btn-after signOut\" href=\"http://localhost:3001/auth/logout\">Sign out</a>\n           </span>)\n            :\n          (<span className=\"authStatus\"></span>)\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Prism from \"prismjs\";\nimport \"./style.css\";\nimport \"./prism.css\";\n\nclass Hero extends Component {\n\n  state = {};\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n\n  }\n\n  render() {\n    return (\n      <div className=\"hero\">\n        <span className=\"description\">\n          Code bookmarking and educational conversation\n        </span>\n        <pre className=\"codePreview\">\n          <code className=\"language-javascript\">{`\nimport PriorityQueue from '../../../data-structures/priority-queue/PriorityQueue';\n\nexport default function dijkstra(graph, startVertex) {\n  // Init helper variables that we will need for Dijkstra algorithm.\n  const distances = {};\n  const visitedVertices = {};\n  const previousVertices = {};\n  const queue = new PriorityQueue();\n\n  // Init all distances with infinity assuming that currently we can't reach\n  // any of the vertices except the start one.\n  graph.getAllVertices().forEach((vertex) => {\n    distances[vertex.getKey()] = Infinity;\n    previousVertices[vertex.getKey()] = null;\n  });\n\n  // We are already at the startVertex so the distance to it is zero.\n  distances[startVertex.getKey()] = 0;\n\n  // Init vertices queue.\n  queue.add(startVertex, distances[startVertex.getKey()]);\n\n  // Iterate over the priority queue of vertices until it is empty.\n  while (!queue.isEmpty()) {\n    // Fetch next closest vertex.\n    const currentVertex = queue.poll();\n\n    // Iterate over every unvisited neighbor of the current vertex.\n    currentVertex.getNeighbors().forEach((neighbor) => {\n      // Don't visit already visited vertices.\n      if (!visitedVertices[neighbor.getKey()]) {\n        // Update distances to every neighbor from current vertex.\n        const edge = graph.findEdge(currentVertex, neighbor);\n\n        const existingDistanceToNeighbor = distances[neighbor.getKey()];\n        const distanceToNeighborFromCurrent = distances[currentVertex.getKey()] + edge.weight;\n\n        // If we've found shorter path to the neighbor - update it.\n        if (distanceToNeighborFromCurrent < existingDistanceToNeighbor) {\n          distances[neighbor.getKey()] = distanceToNeighborFromCurrent;\n\n          // Change priority of the neighbor in a queue since it might have became closer.\n          if (queue.hasValue(neighbor)) {\n            queue.changePriority(neighbor, distances[neighbor.getKey()]);\n          }\n\n          // Remember previous closest vertex.\n          previousVertices[neighbor.getKey()] = currentVertex;\n        }\n\n        // Add neighbor to the queue for further visiting.\n        if (!queue.hasValue(neighbor)) {\n          queue.add(neighbor, distances[neighbor.getKey()]);\n        }\n      }\n    });\n\n    // Add current vertex to visited ones to avoid visiting it again later.\n    visitedVertices[currentVertex.getKey()] = currentVertex;\n  }\n\n  // Return the set of shortest distances to all vertices and the set of\n  // shortest paths to all vertices in a graph.\n  return {\n    distances,\n    previousVertices,\n  };\n}`}\n          </code>\n        </pre>\n        {this.props.user.social ?\n          ''\n            :\n          (<span>\n            <a className=\"github login\" href=\"http://localhost:3001/auth/github\"><i className=\"devicon-github-plain colored\"></i>Sign in with GitHub</a>\n            <Link className=\"local login\" to=\"/login/local\">...or sign in with a username and password instead</Link>\n          </span>)\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default Hero;\n","import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport Prism from \"prismjs\";\nimport \"./prism.css\";\nimport \"./style.css\";\nimport \"./prism-dark.css\";\n\nclass PostDetail extends Component {\n\n  state = {\n    postKey: this.props.match.params.postKey,\n    postDetails: {},\n    postComments: [],\n    postHasLoaded: false,\n    commentsAreRealtime: false,\n    userHighlightStart: -1,\n    userHighlightEnd: -1\n  };\n\n  constructor(props) {\n    super(props);\n    this.socket = null;\n  }\n\n  componentDidMount() {\n    this.loadPost(); //.then(this.loadComments());\n  }\n\n  loadPost() {\n    return new Promise((resolve, reject) => {\n      if (this.state.postKey) {\n        let queryString = 'http://localhost:3001/api/posts/' + this.state.postKey;\n        let queryOptions = {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\", \"Access-Control-Allow-Credentials\": true }\n        };\n        fetch(queryString, queryOptions).then(response => {\n          return response.json()\n        }).then(data => {\n          data.content = Prism.highlight(atob(data.content), Prism.languages.javascript, 'javascript');\n          this.setState({\n            postDetails: data,\n            postHasLoaded: true\n          })\n        });\n      } else {\n        reject('A valid post ID was not provided.');\n      }\n    });\n  }\n\n  loadComments() {\n    this.socket = io.connect({ query: { postKey: this.state.postKey } });\n    this.socket.on('connection', (socket) => { this.setState({ commentsAreRealtime: true }); });\n    this.socket.on('disconnect', (socket) => { this.setState({ commentsAreRealtime: false }); });\n    this.socket.on('existingComments', (comments) => { this.setState({ postComments: comments }); });\n    this.socket.on('newComment', this.handleInboundNewComment);\n  }\n\n  handleInboundNewComment(commentData) {\n    if (this.state.postHasLoaded) {\n      if (this.state.postComments.length > 0) {\n        // append this comment to the existing array\n        this.setState((existingState) => ({\n          postComments: [...existingState.postComments, commentData]\n        }));\n      } else {\n        // this new comment is the first one, so set the array to it\n        this.setState({\n          postComments: [commentData]\n        });\n      }\n    }\n  }\n\n  postNewComment(commentText) {\n    // TODO: this function should be called by the \"submit\" button after the user has typed in a new comment\n    let commentData = {\n      author: this.props.authUser.id,\n      text: commentText\n    };\n    if (this.state.userHighlightStart && this.state.userHighlightEnd) {\n      commentData.highlightStart = this.state.userHighlightStart;\n      commentData.highlightEnd = this.state.userHighlightEnd;\n    }\n    this.socket.emit('newCommentRequest', commentData);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"postHeader\">\n          <span className=\"postAuthor\">Author<br/>{this.state.postDetails.author}</span><br/>\n          <span className=\"postTitle\">Title<br/>{this.state.postDetails.title}</span><br/>\n          <span className=\"postDescription\">Description<br/>{this.state.postDetails.description}</span><br/>\n          <pre>\n            <code className=\"language-javascript\" dangerouslySetInnerHTML={{ __html: this.state.postDetails.content }} ></code>\n          </pre>\n        </div>\n        {/*\n        {JSON.stringify(this.state.postDetails)}\n        // TODO: render the code container on the left, with title-desc-author above\n        // TODO: render the comments on the right, with realtime status above and text input for new comments below\n        */}\n      </div>\n    );\n  }\n\n}\n\nexport default PostDetail;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport \"./style.css\";\n\nclass PostComposer extends Component {\n\n  state = {\n    title: '',\n    description: '',\n    content: ''\n  };\n\n  constructor(props) {\n    super(props);\n    this.postTitleInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.postTitleInput.current.focus();\n  }\n\n  handleTitleChange = (event) => { this.setState({ title: event.target.value }); }\n  handleDescriptionChange = (event) => { this.setState({ description: event.target.value }); }\n  handleContentChange = (event) => { this.setState({ content: event.target.value }); }\n\n  tryPublishPost() {\n    let postData = {\n      author: this.props.user._id,\n      title: this.state.title,\n      description: this.state.description,\n      content: btoa(this.state.content)\n    }\n    console.clear();\n    console.log(postData);\n    let queryString = \"http://localhost:3001/api/posts\";\n    let queryOptions = {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true,\n        \"Access-Control-Allow-Origin\": \"localhost:3001\"\n      },\n      body: JSON.stringify(postData)\n    };\n    fetch(queryString, queryOptions)\n      .then(response => {\n        console.log(response);\n      })\n    // TODO: call \"publishPost\" express route here, then using the returned postKey, call:\n    // this.props.history.push('/viewpost?key=KEY_HERE')\n  }\n\n  render() {\n    return (\n      <div className=\"compositionBox\">\n        <div className=\"formStyle postAuthorName\">\n          <span className=\"formStyleInput postAuthorName\">{this.props.user.social ? this.props.user.social.github.username : ''}</span>\n        </div>\n        <div className=\"formStyle postTitleBox\">\n          <input type=\"text\" name=\"postTitleBox\" className=\"formStyleInput postTitleBox\" ref={this.postTitleInput}  onChange={this.handleTitleChange}></input>\n        </div>\n        <div className=\"formStyle descriptionBox\">\n          <textarea id=\"descriptionBox\" name=\"descriptionBox\" className=\"formStyleInput descriptionBox\" onChange={this.handleDescriptionChange}></textarea>\n        </div>\n        <div className=\"formStyle codeBox\">\n          <textarea id=\"codeBox\" name=\"codeBox\" className=\"formStyleInput codeBox\" onChange={this.handleContentChange}></textarea>\n        </div>\n        <div className=\"btn-row submitActions\">\n          <Link to=\"/\" className=\"red rounded-btn icon-btn-before cancelPost\">Cancel</Link>\n          <span className=\"lime rounded-btn icon-btn-before publishPost\" onClick={(e) => this.tryPublishPost(e)}>Publish your mark</span>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default PostComposer;\n","import React, { Component } from \"react\";\n\nclass UserProfile extends Component {\n  // TODO: add the mouseenter and mouseleave event hander to pass the \"code highlight\" events up to the parent PostDetail component\n\n  state = {};\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  Greeting(props) {\n    const provider = this.props.user.provider;\n\n    if (provider === \"github\") {\n      return <h1>You are logged in with your Github account</h1>;\n    } else if (provider === \"local\") {\n      return <h1>You are logged in with your CODEMARKS account</h1>;\n    }\n  }\n\n  render() {\n    return <div>{this.Greeting()}</div>;\n  }\n}\n\nexport default UserProfile;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Prism from \"prismjs\";\nimport \"./prism.css\";\nimport \"./style.css\";\n\nclass PreviewCard extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    let highlightedCode = Prism.highlight(atob(this.props.previewData.content), Prism.languages.javascript, 'javascript');\n    return (\n      <Link to={'/viewpost/' + this.props.previewData._id} className=\"previewCard\">\n        <pre className=\"codePreview\">\n          <code className=\"language-javascript\" dangerouslySetInnerHTML={{ __html: highlightedCode }}></code>\n        </pre>\n        <div className=\"tagContainer\">\n          <span className=\"postTag\">Android</span>\n          <span className=\"postTag\">XML</span>\n          <span className=\"postTag\">UI</span>\n        </div>\n        <div className=\"details\">\n          <span className=\"title\">{this.props.previewData.title}</span>\n          <span className=\"description\">{this.props.previewData.description}</span>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default PreviewCard;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass TagManager extends Component {\n  // TODO: add the mouseenter and mouseleave event hander to pass the \"code highlight\" events up to the parent PostDetail component\n\n  state = {\n    tagData: []\n  };\n\n  componentDidMount() {\n    this.loadTags();\n  }\n\n  renderTagList() {\n    return this.state.tagData.map(tag => <span>{tag.name}</span>);\n  }\n\n  loadTags = () => {\n    fetch(\"http://localhost:3001/api/tags\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ tagData: data });\n      });\n  };\n\n  render() {\n    return <div className=\"tagList\">{this.renderTagList()}</div>;\n  }\n}\n\nexport default TagManager;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Hero from \"./components/Hero\";\nimport PostDetail from \"./components/PostDetail\";\nimport PostComposer from \"./components/PostComposer\";\nimport UserProfile from \"./components/UserProfile\";\nimport PreviewCard from \"./components/PreviewCard\";\nimport TagManager from \"./components/TagManager\";\nimport \"./style.css\";\n\nclass App extends Component {\n  state = {\n    user: false,\n    authenticated: false,\n    postPreviewData: []\n  };\n\n  handleViewPopularPosts = () => {\n    fetch(\"http://localhost:3001/api/posts\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(data => this.setState({ postPreviewData: data }));\n  };\n\n  componentDidMount() {\n    fetch(\"http://localhost:3001/auth/checkAuth\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        }\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({ authenticated: true, user: responseJson.user });\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      })\n      .finally(this.handleViewPopularPosts());\n  }\n\n  checkAuthState() {\n    let authFailureString = \"Unauthenticated.\";\n    let authAbnormalString = \"Unexpected authentication state.\";\n    let queryString = \"/checkAuthState\";\n    let queryOptions = {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    };\n    fetch(queryString, queryOptions)\n      .then(response => {\n        switch (response.status) {\n          case 200:\n            return response.json();\n            break;\n          case 401:\n            throw new Error(authFailureString);\n            break;\n          default:\n            throw new Error(authAbnormalString);\n            break;\n        }\n      })\n      .then(userInfo => this.setState({ user: userInfo }))\n      .catch(error => this.setState({ user: false }));\n  }\n\n  renderPreviewCards() {\n    return this.state.postPreviewData.map(postPreview => (\n      <PreviewCard previewData={postPreview} />\n    ));\n  }\n\n  _handleLogoutClick = () => {\n    window.open(\"http://localhost:3001/auth/logout\", \"_self\");\n    //this.props.handleNotAuthenticated();\n  };\n\n  _handleSignInClick = () => {\n    window.open(\"http://localhost:3001/auth/github\", \"_self\");\n  };\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <div className=\"container\">\n                <Header\n                  authenticated={this.state.authenticated}\n                  user={this.state.user}\n                  handleViewPopularPosts={this.handleViewPopularPosts}\n                />\n                <div className=\"pageContent\">\n                  <TagManager />\n                  {this.state.authenticated ? (\n                    \"\"\n                  ) : (\n                    <Hero user={this.state.user} />\n                  )}\n                  <div className=\"cardBlock\">{this.renderPreviewCards()}</div>\n                </div>\n              </div>\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/login/local\"\n            render={props => <div>Login form here</div>}\n          />\n\n          <Route\n            path=\"/viewpost/:postKey\"\n            render={props => (\n              <div className=\"container\">\n                <Header\n                  authenticated={this.state.authenticated}\n                  user={this.state.user}\n                  handleViewPopularPosts={this.handleViewPopularPosts}\n                />\n                <div className=\"pageContent\">\n                  <PostDetail {...props} />\n                </div>\n              </div>\n            )}\n          />\n\n          <Route\n            path=\"/newpost\"\n            render={props => (\n              <div className=\"container\">\n                <Header\n                  authenticated={this.state.authenticated}\n                  user={this.state.user}\n                />\n                <div className=\"pageContent\">\n                  <PostComposer user={this.state.user} />\n                </div>\n              </div>\n            )}\n          />\n\n          <Route\n            path=\"/profile\"\n            render={props => (\n              <div>\n                <UserProfile {...props} />\n              </div>\n            )}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}